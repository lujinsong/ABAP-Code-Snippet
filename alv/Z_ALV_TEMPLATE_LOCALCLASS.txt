*&---------------------------------------------------------------------*
*& Report  Z_ALV_TEMPLATE
*&
*&---------------------------------------------------------------------*
*&    Use ALV Grid Control - CL_GUI_ALV_GRID
*&    MVC Design Pattern
*&    Model - ZCL_ALV_DATA
*&    Controller - ZCL_ALV_SERVICE
*&
*&
*&
*&
*&---------------------------------------------------------------------*

REPORT  Z_ALV_TEMPLATE
        MESSAGE-ID ZALV
        NO STANDARD PAGE HEADING
        LINE-SIZE 276
        LINE-COUNT 65.

*******Tables
TABLES: SFLIGHT,
        SBOOK.

*******Data Definition ********************
DATA: HTAB TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.

****TODO: Your own global types and data section
TYPES: BEGIN OF TY_ALVTABLE,
         CARRID    TYPE S_CARR_ID,
         CONNID    TYPE S_CONN_ID,
         FLDATE    TYPE S_DATE,
         CUSTOMID  TYPE S_CUSTOMER,
         CUSTTYPE  TYPE S_CUSTTYPE,
         SMOKER    TYPE S_SMOKER,
         FORCURKEY TYPE S_CURR,
         FORCURAM  TYPE S_F_CUR_PR,
       END OF TY_ALVTABLE.


DATA: ITAB_ALVTABLE TYPE STANDARD TABLE OF TY_ALVTABLE,
      WA_ALVTABLE   TYPE TY_ALVTABLE.
DATA: GV_CUSTTYPE TYPE S_CUSTTYPE.

*************** Select Screen ***********************

SELECTION-SCREEN BEGIN OF BLOCK MAIN WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS S_CARRID FOR SFLIGHT-CARRID.
SELECT-OPTIONS S_CONNID FOR SFLIGHT-CONNID.
SELECT-OPTIONS S_FLDATE FOR SFLIGHT-FLDATE.
SELECTION-SCREEN END OF BLOCK MAIN.

SELECTION-SCREEN BEGIN OF BLOCK CUST_OPTIONS WITH FRAME TITLE TEXT-002.
PARAMETERS:  P_CURKEY LIKE SBOOK-FORCURKEY.
PARAMETERS:  P_SMOKER AS CHECKBOX DEFAULT ''.
SELECTION-SCREEN BEGIN OF BLOCK CUST_TYPE WITH FRAME TITLE TEXT-006.
SELECTION-SCREEN BEGIN OF LINE. " label and radio button in one line
SELECTION-SCREEN COMMENT 5(25) TEXT-003.
PARAMETERS:  P_CUSTP RADIOBUTTON GROUP R01 DEFAULT 'X'.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 5(25) TEXT-004.
PARAMETERS:  P_CUSTB RADIOBUTTON GROUP R01.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK CUST_TYPE.
SELECTION-SCREEN END OF BLOCK CUST_OPTIONS.

SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-005.
PARAMETERS: RB_SCRN RADIOBUTTON GROUP RBG1,
            RB_DNLD RADIOBUTTON GROUP RBG1.
PARAMETERS: P_PATH LIKE RLGRAP-FILENAME DEFAULT '/sap/saptools/'.
PARAMETERS: P_FILE LIKE RLGRAP-FILENAME
                 DEFAULT 'zsflight.txt'.
SELECTION-SCREEN END OF BLOCK B2.

* ALV Layout Variable.
PARAMETERS: P_VARI LIKE DISVARIANT-VARIANT.

*************** ALV Model and Controller class definition***************
***** Controller ZCL_ALV_SERVICE class. No need to change the service class. Better to create it in the public pool via se24.
CLASS ZCL_ALV_SERVICE DEFINITION.
  "* public components of class ZCL_ALV_SERVICE
  "* do not include other source files here!!!
  PUBLIC SECTION.
    DATA GR_ALV_TITLE(50) TYPE C .
    DATA GC_CUSTOM_CONTROL_NAME TYPE SCRFNAME VALUE 'CC_ALV'. "#EC NOTEXT .
    DATA GR_ALVGRID TYPE REF TO CL_GUI_ALV_GRID .
    CLASS-METHODS GETVARIANT
      IMPORTING
        VALUE(SAVETYPE) TYPE C
      CHANGING
        !ES_VARIANT     TYPE SLIS_VARI .
    METHODS CONSTRUCTOR
      IMPORTING
        VALUE(IN_ALV_TITLE)           TYPE C DEFAULT 'Report'
        VALUE(IN_CUSTOM_CONTROL_NAME) TYPE SCRFNAME DEFAULT 'CC_ALV'
          PREFERRED PARAMETER IN_ALV_TITLE .
    METHODS DISPLAY_ALV
      CHANGING
        !GT_FIELDCAT TYPE LVC_T_FCAT
        !GS_LAYOUT   TYPE LVC_S_LAYO
        !GS_TAB      TYPE STANDARD TABLE
        !GS_VARIANT  TYPE SLIS_VARI OPTIONAL .
    METHODS FREE .
    CLASS-METHODS CHECKVARIANT
      IMPORTING
        VALUE(SAVETYPE) TYPE C
      CHANGING
        !ES_VARIANT     TYPE SLIS_VARI .
    METHODS CHECK_CHANGED_DATA .
    METHODS REFRESH .
    METHODS DATACHANGED .
  PROTECTED SECTION.
    DATA GR_CCONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER .
    DATA ISFIRSTTIME TYPE C VALUE 'X'.                    "#EC NOTEXT .
    "* private components of class ZCL_ALV_SERVICE
    "* do not include other source files here!!!
  PRIVATE SECTION.
ENDCLASS.
CLASS ZCL_ALV_SERVICE IMPLEMENTATION.
  METHOD GETVARIANT.
    DATA: I_VARIANT TYPE DISVARIANT,
          E_VARIANT TYPE DISVARIANT.
    DATA: LV_EXIT TYPE C.
    I_VARIANT-REPORT = SY-CPROG.
    CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
      EXPORTING
        IS_VARIANT    = I_VARIANT
        I_SAVE        = SAVETYPE
*       i_tabname_header    =
*       i_tabname_item      =
*       it_default_fieldcat =
      IMPORTING
        E_EXIT        = LV_EXIT
        ES_VARIANT    = E_VARIANT
      EXCEPTIONS
        NOT_FOUND     = 1
        PROGRAM_ERROR = 2
        OTHERS        = 3.
    IF SY-SUBRC IS INITIAL.
      IF LV_EXIT IS INITIAL.
        ES_VARIANT = E_VARIANT-VARIANT.
      ENDIF.
    ELSE.
      MESSAGE S205(0K).
    ENDIF.
  ENDMETHOD.

  METHOD CONSTRUCTOR.
    ME->GC_CUSTOM_CONTROL_NAME = IN_CUSTOM_CONTROL_NAME.
    CREATE OBJECT GR_CCONTAINER
      EXPORTING
*       PARENT                      =
        CONTAINER_NAME              = ME->GC_CUSTOM_CONTROL_NAME
        STYLE                       = CL_GUI_CONTROL=>WS_MAXIMIZEBOX
*       LIFETIME                    = lifetime_default
*       REPID                       =
*       DYNNR                       =
*       NO_AUTODEF_PROGID_DYNNR     =
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        OTHERS                      = 6.
*--- Exception handling
    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      EXIT.
    ENDIF.
*--- Creating ALV Grid instance
    CREATE OBJECT GR_ALVGRID
      EXPORTING
*       I_SHELLSTYLE      = 0
*       I_LIFETIME        =
        I_PARENT          = GR_CCONTAINER
*       I_APPL_EVENTS     = space
*       I_PARENTDBG       =
*       I_APPLOGPARENT    =
*       I_GRAPHICSPARENT  =
*       I_NAME            =
*       I_FCAT_COMPLETE   = SPACE
      EXCEPTIONS
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        OTHERS            = 5.
    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      EXIT.
    ENDIF.
  ENDMETHOD.
  METHOD DISPLAY_ALV.
    DATA: I_VARIANT TYPE DISVARIANT.
    I_VARIANT-REPORT = SY-CPROG.
    I_VARIANT-VARIANT = GS_VARIANT.
    IF ISFIRSTTIME EQ 'X'.
*--- set first display
      CALL METHOD GR_ALVGRID->SET_TABLE_FOR_FIRST_DISPLAY
        EXPORTING
*         I_BUFFER_ACTIVE =
*         I_BYPASSING_BUFFER            =
*         I_CONSISTENCY_CHECK           =
*         I_STRUCTURE_NAME              =
          IS_VARIANT      = I_VARIANT
          I_SAVE          = 'A'
*         I_DEFAULT       = 'X'
          IS_LAYOUT       = GS_LAYOUT
*         IS_PRINT        =
*         IT_SPECIAL_GROUPS             =
*         IT_TOOLBAR_EXCLUDING          =
*         IT_HYPERLINK    =
*         IT_ALV_GRAPHICS =
*         IT_EXCEPT_QINFO =
*         IR_SALV_ADAPTER =
        CHANGING
          IT_OUTTAB       = GS_TAB
          IT_FIELDCATALOG = GT_FIELDCAT
*         IT_SORT         =
*         IT_FILTER       =
*    EXCEPTIONS
*         INVALID_PARAMETER_COMBINATION = 1
*         PROGRAM_ERROR   = 2
*         TOO_MANY_LINES  = 3
*         others          = 4
        .
      IF SY-SUBRC <> 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.
      ISFIRSTTIME = ' '.
    ELSE.
      CALL METHOD GR_ALVGRID->REFRESH_TABLE_DISPLAY
*  EXPORTING
*    IS_STABLE      =
*    I_SOFT_REFRESH =
*  EXCEPTIONS
*    FINISHED       = 1
*    others         = 2
        .
      IF SY-SUBRC <> 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD FREE.
    CALL METHOD GR_ALVGRID->FREE
      EXCEPTIONS
        CNTL_ERROR        = 1
        CNTL_SYSTEM_ERROR = 2
        OTHERS            = 3.
    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
    CALL METHOD GR_CCONTAINER->FREE
      EXCEPTIONS
        CNTL_ERROR        = 1
        CNTL_SYSTEM_ERROR = 2
        OTHERS            = 3.
    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.
  METHOD CHECKVARIANT.
    DATA: C_VARIANT TYPE DISVARIANT.
    IF NOT ES_VARIANT IS INITIAL.
      MOVE: ES_VARIANT TO C_VARIANT-VARIANT,
            SY-CPROG TO C_VARIANT-REPORT.
      CALL FUNCTION 'REUSE_ALV_VARIANT_EXISTENCE'
        EXPORTING
          I_SAVE     = SAVETYPE
        CHANGING
          CS_VARIANT = C_VARIANT.
*        exceptions
*             wrong_input   = 1
*             not_found     = 2
*             program_error = 3
*             others        = 4.
    ENDIF.
  ENDMETHOD.
  METHOD CHECK_CHANGED_DATA.
    CALL METHOD GR_ALVGRID->CHECK_CHANGED_DATA
*  IMPORTING
*    E_VALID   =
*  CHANGING
*    C_REFRESH = 'X'
      .
  ENDMETHOD.
  METHOD REFRESH.
    IF ISFIRSTTIME <> 'X'.
      CALL METHOD GR_ALVGRID->REFRESH_TABLE_DISPLAY
*  EXPORTING
*    IS_STABLE      =
*    I_SOFT_REFRESH =
*  EXCEPTIONS
*    FINISHED       = 1
*    others         = 2
        .
      IF SY-SUBRC <> 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD DATACHANGED.
    ISFIRSTTIME = 'X'.
  ENDMETHOD.
ENDCLASS.

***** Model ZCL_DATA Class Definition
CLASS ZCL_DATA DEFINITION.
  PUBLIC SECTION.
*types:
*** static method ***
    CLASS-METHODS GET_GS_LAYOUT
      IMPORTING
        !GS_TITLE  TYPE C
      CHANGING
        !PS_LAYOUT TYPE LVC_S_LAYO .
    METHODS GET_FIELDCAT
      IMPORTING
        !ISRESULT    TYPE C DEFAULT ' '
      CHANGING
        !PT_FIELDCAT TYPE LVC_T_FCAT .
*** object level method ***
*** data manipulating ***
    METHODS GET_DATA.
*** alv event handling *******
    METHODS HANDLE_HOTSPOT_CLICK
          FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
      IMPORTING
          !E_ROW_ID
          !E_COLUMN_ID
          !ES_ROW_NO .
    METHODS ON_DOUBLE_CLICK FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
      IMPORTING E_ROW E_COLUMN ES_ROW_NO.
ENDCLASS. "ZCL_DATA definition
CLASS ZCL_DATA IMPLEMENTATION.
  METHOD GET_GS_LAYOUT.
    PS_LAYOUT-ZEBRA = 'X'.
    PS_LAYOUT-GRID_TITLE = GS_TITLE.
    PS_LAYOUT-SMALLTITLE = 'X'.
*    PS_LAYOUT-BOX_FNAME = 'CHECKBOX'.
  ENDMETHOD.                    "GET_GS_LAYOUT

****TODO: Prepare ALV Field Category (column name, type etc)
  METHOD GET_FIELDCAT.
    DATA WA_PT_FCAT TYPE LVC_S_FCAT.
*    CLEAR WA_PT_FCAT.
*    WA_PT_FCAT-FIELDNAME = 'CHECKBOX'.
*    WA_PT_FCAT-CHECKBOX = 'X'.
*    WA_PT_FCAT-EDIT = 'X'.
*    WA_PT_FCAT-COLTEXT = 'Select'.
*    WA_PT_FCAT-SELTEXT = 'Select A Row'.
*    APPEND WA_PT_FCAT TO PT_FIELDCAT.

    CLEAR WA_PT_FCAT.
    WA_PT_FCAT-FIELDNAME = 'CARRID'.
    WA_PT_FCAT-REF_TABLE = 'SFLIGHT'.
    WA_PT_FCAT-REF_FIELD = 'CARRID'.
    WA_PT_FCAT-OUTPUTLEN = '15'.
    WA_PT_FCAT-JUST = 'C'.
    WA_PT_FCAT-COLTEXT = 'Carrier ID'.
    WA_PT_FCAT-SELTEXT = 'Carrier ID'.
    APPEND WA_PT_FCAT TO PT_FIELDCAT.

    CLEAR WA_PT_FCAT.
    WA_PT_FCAT-FIELDNAME = 'CONNID'.
    WA_PT_FCAT-REF_TABLE = 'SFLIGHT'.
    WA_PT_FCAT-REF_FIELD = 'CONNID'.
    WA_PT_FCAT-OUTPUTLEN = '15'.
    WA_PT_FCAT-JUST = 'C'.
    WA_PT_FCAT-COLTEXT = 'Connection ID'.
    WA_PT_FCAT-SELTEXT = 'Connection ID'.
    APPEND WA_PT_FCAT TO PT_FIELDCAT.

    CLEAR WA_PT_FCAT.
    WA_PT_FCAT-FIELDNAME = 'FLDATE'.
    WA_PT_FCAT-REF_TABLE = 'SFLIGHT'.
    WA_PT_FCAT-REF_FIELD = 'FLDATE'.
    WA_PT_FCAT-OUTPUTLEN = '15'.
    WA_PT_FCAT-JUST = 'C'.
    WA_PT_FCAT-COLTEXT = 'Flight Date'.
    WA_PT_FCAT-SELTEXT = 'Flight Date'.
    APPEND WA_PT_FCAT TO PT_FIELDCAT.

    CLEAR WA_PT_FCAT.
    WA_PT_FCAT-FIELDNAME = 'CUSTOMID'.
    WA_PT_FCAT-REF_TABLE = 'SBOOK'.
    WA_PT_FCAT-REF_FIELD = 'CUSTOMID'.
    WA_PT_FCAT-OUTPUTLEN = '15'.
    WA_PT_FCAT-JUST = 'C'.
    WA_PT_FCAT-COLTEXT = 'Customer ID'.
    WA_PT_FCAT-SELTEXT = 'Customer ID'.
    APPEND WA_PT_FCAT TO PT_FIELDCAT.

    CLEAR WA_PT_FCAT.
    WA_PT_FCAT-FIELDNAME = 'CUSTTYPE'.
    WA_PT_FCAT-REF_TABLE = 'SBOOK'.
    WA_PT_FCAT-REF_FIELD = 'CUSTTYPE'.
    WA_PT_FCAT-OUTPUTLEN = '13'.
    WA_PT_FCAT-JUST = 'C'.
    WA_PT_FCAT-COLTEXT = 'Customer Type'.
    WA_PT_FCAT-SELTEXT = 'Customer Type'.
    APPEND WA_PT_FCAT TO PT_FIELDCAT.

    CLEAR WA_PT_FCAT.
    WA_PT_FCAT-FIELDNAME = 'SMOKER'.
    WA_PT_FCAT-REF_TABLE = 'SBOOK'.
    WA_PT_FCAT-REF_FIELD = 'SMOKER'.
    WA_PT_FCAT-OUTPUTLEN = '15'.
    WA_PT_FCAT-JUST = 'C'.
    WA_PT_FCAT-COLTEXT = 'Smoker'.
    WA_PT_FCAT-SELTEXT = 'Smoker'.
    APPEND WA_PT_FCAT TO PT_FIELDCAT.


    CLEAR WA_PT_FCAT.
    WA_PT_FCAT-FIELDNAME = 'FORCURKEY'.
    WA_PT_FCAT-REF_TABLE = 'SBOOK'.
    WA_PT_FCAT-REF_FIELD = 'FORCURKEY'.
    WA_PT_FCAT-OUTPUTLEN = '15'.
    WA_PT_FCAT-JUST = 'C'.
    WA_PT_FCAT-COLTEXT = 'Currency'.
    WA_PT_FCAT-SELTEXT = 'Currency'.
    APPEND WA_PT_FCAT TO PT_FIELDCAT.

    CLEAR WA_PT_FCAT.
    WA_PT_FCAT-FIELDNAME = 'FORCURAM'.
    WA_PT_FCAT-REF_TABLE = 'SBOOK'.
    WA_PT_FCAT-REF_FIELD = 'FORCURAM'.
    WA_PT_FCAT-OUTPUTLEN = '15'.
    WA_PT_FCAT-JUST = 'C'.
    WA_PT_FCAT-COLTEXT = 'Amount'.
    WA_PT_FCAT-SELTEXT = 'Amount'.
    APPEND WA_PT_FCAT TO PT_FIELDCAT.


  ENDMETHOD.                    "GET_FIELDCAT



  METHOD    GET_DATA.
***TODO: prepare the model data here.
    SELECT A~CARRID A~CONNID A~FLDATE B~CUSTOMID B~CUSTTYPE
           B~SMOKER B~FORCURKEY B~FORCURAM
      INTO TABLE ITAB_ALVTABLE
      FROM SFLIGHT AS A INNER JOIN SBOOK AS B ON A~CARRID = B~CARRID AND A~CONNID = B~CONNID
      WHERE A~CARRID IN S_CARRID AND
            A~CONNID IN S_CONNID AND
            A~FLDATE IN S_FLDATE AND
            CUSTTYPE = GV_CUSTTYPE AND
            SMOKER = P_SMOKER.


  ENDMETHOD.                    "get_data

*** alv event handling ****
  METHOD HANDLE_HOTSPOT_CLICK.
****TODO: Handle hot spot click
* DATA wa_inv_aging TYPE TY_INV_AGING.
* READ TABLE i_inv_aging INTO wa_inv_aging index ES_ROW_NO-row_id.
* IF sy-subrc = 0 AND E_COLUMN_ID-fieldname = 'BELNR'.
* SET PARAMETER ID 'BLN' field wa_inv_aging-BELNR.
* SET PARAMETER ID 'BUK' field wa_inv_aging-BUKRS.
* CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
* ENDIF.
  ENDMETHOD.                    "HANDLE_HOTSPOT_CLICK

  METHOD ON_DOUBLE_CLICK.
****TODO: Handle double click
* import e_row_id e_column es_row_no
    DATA:L_ROW    TYPE I,
         L_COLUMN TYPE LVC_FNAME.
    L_ROW = E_ROW-INDEX.
    L_COLUMN = E_COLUMN-FIELDNAME.
*    READ TABLE i_inv_aging INTO wa_inv_aging index ES_ROW_NO-row_id.
*  IF sy-subrc = 0 AND E_COLUMN-fieldname = 'BELNR'.
*    SET PARAMETER ID 'BLN' field wa_inv_aging-BELNR.
*    SET PARAMETER ID 'BUK' field wa_inv_aging-BUKRS.
*    CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
  ENDMETHOD.                    "on_double_click

ENDCLASS. "ZCL_DATA implementation

*************** End of ALV Model and Controller classes***************

*************** Initialize MVC objects
DATA REF_DATA_OBJECT TYPE REF TO ZCL_DATA.
*************** ALV related ******************************
****TODO: Type the report name here.
DATA: GS_TITLE(50) TYPE C VALUE 'Report Name Here'.
*-- Layout Structure
DATA GS_LAYOUT TYPE LVC_S_LAYO.
*-- ALV Service CLASS, display the ALV
DATA: DIST_ALV_DISPLAY TYPE REF TO ZCL_ALV_SERVICE.
*-- Field Category
DATA GT_FIELDCAT TYPE LVC_T_FCAT.
*-- File Name
DATA: FNAME(128) TYPE C.



INITIALIZATION.
****TODO: initialization here

****TODO: Comment it out or delete it if no radio button action needed to be handled.
AT SELECTION-SCREEN ON RADIOBUTTON GROUP R01.

END-OF-SELECTION.

*-- when alv variant has been selected, find the stored variant.
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_VARI.
  CALL METHOD ZCL_ALV_SERVICE=>GETVARIANT
    EXPORTING
      SAVETYPE   = 'A'
    CHANGING
      ES_VARIANT = P_VARI.

END-OF-SELECTION.


START-OF-SELECTION.
***TODO: Delete the code below
  IF P_CUSTP = 'X'.
    GV_CUSTTYPE = 'P'.
  ELSEIF P_CUSTB = 'X'.
    GV_CUSTTYPE = 'B'.
  ENDIF.

* ALV output or Background job download.
  IF RB_SCRN = 'X'.
    PERFORM ALV_OUTPUT.
  ELSE.
    PERFORM DOWNLOAD_OUTPUT.
  ENDIF.


FORM ALV_OUTPUT.
*************** free the object ref and clean the memory if already called before *************
  IF REF_DATA_OBJECT IS BOUND.
    FREE  REF_DATA_OBJECT.
  ENDIF.

  IF DIST_ALV_DISPLAY IS BOUND.
    FREE  DIST_ALV_DISPLAY.
  ENDIF.

  CLEAR: GS_LAYOUT, GT_FIELDCAT.
  REFRESH:   GT_FIELDCAT.


*************** initialize the alv container and pareparing the data***********
  CREATE OBJECT REF_DATA_OBJECT.

*-- Prepare the selection alv
  CREATE OBJECT DIST_ALV_DISPLAY
    EXPORTING
      IN_ALV_TITLE           = GS_TITLE
      IN_CUSTOM_CONTROL_NAME = 'CC_ALV'.

* static method call
  CALL METHOD ZCL_DATA=>GET_GS_LAYOUT
    EXPORTING
      GS_TITLE  = GS_TITLE
    CHANGING
      PS_LAYOUT = GS_LAYOUT.

* get the prepared field category and feed it when alv object is displayed.
  CALL METHOD REF_DATA_OBJECT->GET_FIELDCAT
    CHANGING
      PT_FIELDCAT = GT_FIELDCAT.

* call method to prepare the data.
  CALL METHOD REF_DATA_OBJECT->GET_DATA.

* -- register event
*  SET HANDLER REF_DATA_OBJECT->HANDLE_HOTSPOT_CLICK FOR DIST_ALV_DISPLAY->GR_ALVGRID.
*  SET HANDLER REF_DATA_OBJECT->ON_DOUBLE_CLICK FOR DIST_ALV_DISPLAY->GR_ALVGRID.

  CALL SCREEN 1001.
ENDFORM.

FORM DOWNLOAD_OUTPUT.
  IF REF_DATA_OBJECT IS BOUND.
    FREE  REF_DATA_OBJECT.
  ENDIF.

*************** initialize the alv container and pareparing the data***********
  CREATE OBJECT REF_DATA_OBJECT.

* call method to prepare the data.
  CALL METHOD REF_DATA_OBJECT->GET_DATA.

  CONCATENATE P_PATH P_FILE INTO FNAME.
  OPEN DATASET FNAME FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
  IF SY-SUBRC = 0.
    PERFORM DOWNLOAD_HEADER.
    PERFORM DOWNLOAD_DETAIL.
    CLOSE DATASET FNAME.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  download_header
*&---------------------------------------------------------------------*
* download_header
*----------------------------------------------------------------------*
FORM DOWNLOAD_HEADER.
****TODO: prepare the column header
  DATA: HEADER(1024).
  CONCATENATE 'Carrier' 'Connection' 'Flight Date' 'Customer ID' 'Type' 'Smoker' 'Currency' 'Amount'
     INTO HEADER SEPARATED BY HTAB.
  TRANSFER HEADER TO FNAME.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  download_detail
*&---------------------------------------------------------------------*
* download_detail
*----------------------------------------------------------------------*
FORM DOWNLOAD_DETAIL.
  DATA: DETAIL(1024).
****TODO: implement download file preparation. Use write to perform number format

  DATA: ZFLIGHTDATE(10), ZAMOUNT(15), ZCURRENCY(4).

  CLEAR: DETAIL.
  LOOP AT ITAB_ALVTABLE INTO WA_ALVTABLE.
    WRITE WA_ALVTABLE-FORCURKEY TO ZCURRENCY.
    WRITE WA_ALVTABLE-FORCURAM TO ZAMOUNT LEFT-JUSTIFIED DECIMALS 0.
    CONCATENATE WA_ALVTABLE-FLDATE+4(2) '/' WA_ALVTABLE-FLDATE+6(2) '/' WA_ALVTABLE-FLDATE+0(4) INTO ZFLIGHTDATE.
    CONCATENATE WA_ALVTABLE-CARRID WA_ALVTABLE-CONNID WA_ALVTABLE-FLDATE WA_ALVTABLE-CUSTOMID
                WA_ALVTABLE-CUSTTYPE WA_ALVTABLE-SMOKER ZCURRENCY ZAMOUNT
       INTO DETAIL SEPARATED BY HTAB.
    TRANSFER DETAIL TO FNAME.
    CLEAR: DETAIL.
  ENDLOOP.

ENDFORM.                    " download_detail

*&---------------------------------------------------------------------*
*&      Module  STATUS_1001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_1001 OUTPUT.
  SET PF-STATUS 'ALV'. "Defined in the GUI Status folder
  SET TITLEBAR 'ALV_TITLE'. "Defined in the GUI Title folder
****TODO: set your table
* display it
  CALL METHOD DIST_ALV_DISPLAY->DISPLAY_ALV
    CHANGING
      GT_FIELDCAT = GT_FIELDCAT
      GS_LAYOUT   = GS_LAYOUT
      GS_TAB      = ITAB_ALVTABLE[]
      GS_VARIANT  = P_VARI.
ENDMODULE.                 " STATUS_1001  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_1001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_1001 INPUT.
  CASE SY-UCOMM.
    WHEN 'BACK' OR 'EXIT' OR 'RETURN' OR 'CANCEL' OR '&F03' OR '&F12' OR '&F15'.
      LEAVE TO SCREEN '0'.
      CALL METHOD DIST_ALV_DISPLAY->FREE.
    WHEN 'DISPLAY'.
      LEAVE TO SCREEN 1001.
  ENDCASE.
ENDMODULE.                 " USER_COMMAND_1001  INPUT
