*&---------------------------------------------------------------------*
*& Report  ZMG_ORG_ATTRIBUTE
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZMG_ORG_ATTRIBUTE.
INCLUDE ZMG_INCLUDE.
TABLES: ZORC_PARTS_MIG, MARC, ZMAPS_ORACLE.


DATA: OBJ_MG_TEMPLATE TYPE REF TO ZCL_MG_TEMPLATE.

DATA:
  G_FILEEXTENSION     TYPE STRING VALUE 'txt'.
DATA:
  G_FILENAME_ORG     TYPE RLGRAP-FILENAME.

DATA: ZBATCH TYPE STRING,
      ZDATE  LIKE SY-DATUM,
      ZQTY   TYPE I.

************** Temp Data Definition
TYPES: BEGIN OF TY_PLANTDATA,
         MATNR LIKE MARC-MATNR,
         ZATR2 LIKE ZORC_PARTS_MIG-ZATR2,
         ZATR3 LIKE ZORC_PARTS_MIG-ZATR3,
         DISPO LIKE MARC-DISPO,
         DISMM LIKE MARC-DISMM,
         WEBAZ LIKE MARC-WEBAZ,
         PLIFZ LIKE MARC-PLIFZ,
         SCHGT LIKE MARC-SCHGT,
         BESKZ LIKE MARC-BESKZ,
         EKGRP LIKE MARC-EKGRP,
         LAND1 LIKE ZMARA_CUST-LAND1,
         ZHTSU LIKE ZMARA_CUST-ZHTSU,
         AEDAT LIKE ZMARA_CUST-AEDAT,
         ZECCN LIKE ZMARA_CUST-ZECCN,
         ZSCHD LIKE ZMARA_CUST-ZSCHD,
         DISLS LIKE MARC-DISLS,
         BSTMI LIKE MARC-BSTMI,
         BSTMA LIKE MARC-BSTMA.
TYPES: END OF TY_PLANTDATA.

TYPES: BEGIN OF TY_ORGDATA,
         MATNR TYPE STRING,
         ORGCD TYPE STRING,
         REVCG TYPE STRING,
         ITMMD TYPE STRING,
         PLANN TYPE STRING,
         PLNMD TYPE STRING,
         INVMD TYPE STRING,
         PROCC TYPE I,
         PPROC TYPE I,
         MAKE  TYPE STRING,
         STYPE TYPE STRING,
         SUBIN TYPE STRING,
         LOCAT TYPE STRING,
         BUYER TYPE STRING,
         PBUNT TYPE STRING,
         LAND1 TYPE STRING,
         TCODE TYPE STRING,
         TDATE TYPE STRING,
         TECCN TYPE STRING,
         TSCHD TYPE STRING.
TYPES: END OF TY_ORGDATA.

DATA: GT_PLANTDATA TYPE STANDARD TABLE OF TY_PLANTDATA WITH HEADER LINE,
      GW_PLANTDATA TYPE TY_PLANTDATA,
      GT_ORGDATA   TYPE STANDARD TABLE OF TY_ORGDATA WITH HEADER LINE,
      GW_ORGDATA   TYPE TY_ORGDATA.

DATA: GT_MAPS_ORACLE TYPE STANDARD TABLE OF ZMAPS_ORACLE WITH HEADER LINE.


******************** Selection Screen ***********************************
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-TF1.
PARAMETERS:
  P_OUTPUT TYPE RLGRAP-FILENAME,
  P_ORG    TYPE RLGRAP-FILENAME. "Item-PDHOrgOnlyAttribute-Set-v5
SELECTION-SCREEN END OF BLOCK B1.


SELECTION-SCREEN BEGIN OF BLOCK B3 WITH FRAME TITLE TEXT-TF3.
PARAMETERS: P_WERKS TYPE  MARC-WERKS DEFAULT '2010'.
SELECT-OPTIONS: S_MATNR FOR MARC-MATNR.
PARAMETERS: P_ORGN TYPE CHAR10 DEFAULT 'U03'.
SELECTION-SCREEN END OF BLOCK B3.


SELECTION-SCREEN BEGIN OF BLOCK B5 WITH FRAME TITLE TEXT-TF5.
PARAMETERS:  P_GUI    RADIOBUTTON GROUP R02 DEFAULT 'X' , "GUI, Front End
             P_SERVER RADIOBUTTON GROUP R02. "Batch, Server Side
PARAMETERS: P_TEST AS CHECKBOX.
SELECTION-SCREEN END OF BLOCK B5.



INITIALIZATION.
*  IF P_BATCH IS NOT INITIAL.
*    ZDATE = SY-DATUM.
*    ZBATCH = P_BATCH && '-' && ZDATE.
*  ENDIF.

********   select output folder and template files **********
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_OUTPUT.
  DATA: LV_OUTPUT TYPE STRING.
  CALL METHOD CL_GUI_FRONTEND_SERVICES=>DIRECTORY_BROWSE
    EXPORTING
      WINDOW_TITLE         = 'Please select export folder...'
*     INITIAL_FOLDER       =
    CHANGING
      SELECTED_FOLDER      = LV_OUTPUT
    EXCEPTIONS
      CNTL_ERROR           = 1
      ERROR_NO_GUI         = 2
      NOT_SUPPORTED_BY_GUI = 3
      OTHERS               = 4.
  IF SY-SUBRC <> 0.
    WRITE:/ 'Failed to obtain export folder. Error Code:', SY-SUBRC.
    EXIT.
  ELSE.
    P_OUTPUT = LV_OUTPUT.
  ENDIF.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_ORG.
  PERFORM BROWSE_TEMPLATEFILEPATH
              USING
                 G_FILEEXTENSION
              CHANGING
                 P_ORG
                 G_FILENAME_ORG.

START-OF-SELECTION.

END-OF-SELECTION.


**********  Retrieve Data **********
  IF P_TEST = 'X'.
    SELECT M~MATNR Z~ZATR2 Z~ZATR3 M~DISPO M~DISMM M~WEBAZ M~SCHGT M~BESKZ M~PLIFZ M~EKGRP C~LAND1 C~ZHTSU C~AEDAT C~ZECCN C~ZSCHD M~DISLS M~BSTMI M~BSTMA UP TO 5 ROWS
          INTO CORRESPONDING FIELDS OF TABLE GT_PLANTDATA
          FROM MARC AS M INNER JOIN ZORC_PARTS_MIG AS Z
            ON Z~MATNR = M~MATNR
           AND Z~ZCATG = 'STG'
           LEFT OUTER JOIN ZMARA_CUST AS C
             ON C~MATNR = M~MATNR
            AND C~WERKS = M~WERKS
         WHERE M~MATNR IN S_MATNR
           AND M~WERKS = P_WERKS.
  ELSE.
    SELECT M~MATNR Z~ZATR2 Z~ZATR3 M~DISPO M~DISMM M~WEBAZ M~SCHGT M~BESKZ M~PLIFZ M~EKGRP C~LAND1 C~ZHTSU C~AEDAT C~ZECCN C~ZSCHD M~DISLS M~BSTMI M~BSTMA
          INTO CORRESPONDING FIELDS OF TABLE GT_PLANTDATA
          FROM MARC AS M INNER JOIN ZORC_PARTS_MIG AS Z
            ON Z~MATNR = M~MATNR
           AND Z~ZCATG = 'STG'
           LEFT OUTER JOIN ZMARA_CUST AS C
             ON C~MATNR = M~MATNR
            AND C~WERKS = M~WERKS
         WHERE M~MATNR IN S_MATNR
           AND M~WERKS = P_WERKS.
  ENDIF.

  SELECT * FROM ZMAPS_ORACLE INTO TABLE GT_MAPS_ORACLE WHERE MAPCODE IN ('8','9').

  LOOP AT GT_PLANTDATA INTO GW_PLANTDATA.

    GW_ORGDATA-MATNR = GW_PLANTDATA-MATNR.
    GW_ORGDATA-ORGCD = P_ORGN.
    GW_ORGDATA-REVCG = GW_PLANTDATA-ZATR2 && '.' && GW_PLANTDATA-ZATR3.
    GW_ORGDATA-ITMMD = GW_ORGDATA-REVCG. "RevCorg
*    GW_ORGDATA-PLANN = GW_PLANTDATA-DISPO. " Map code 9 for panner
    CLEAR GT_MAPS_ORACLE.
    READ TABLE GT_MAPS_ORACLE WITH KEY MAPCODE = '9'
                                       SRCVAL = GW_PLANTDATA-DISPO.
    IF SY-SUBRC = 0.
      GW_ORGDATA-PLANN = GT_MAPS_ORACLE-TARVAL.
    ENDIF.
    "GW_ORGDATA-PLANN = GW_PLANTDATA-. "Planner
    CASE GW_PLANTDATA-BESKZ.
      WHEN 'E'. GW_ORGDATA-PLNMD = 'MPS Planning'.
      WHEN 'F'. GW_ORGDATA-PLNMD = 'MRP Planning'.
      WHEN OTHERS.GW_ORGDATA-PLNMD = 'Not Planned'.
    ENDCASE.

    "Plan Method
    IF GW_PLANTDATA-BSTMA > 0.
    GW_ORGDATA-INVMD = 'Min-max planning'. "inventory planning method
    ELSE.
     GW_ORGDATA-INVMD = 'Not Planned'. "inventory planning method
    ENDIF.

    GW_ORGDATA-PROCC = GW_PLANTDATA-PLIFZ.
    GW_ORGDATA-PPROC = GW_PLANTDATA-WEBAZ.
    IF GW_PLANTDATA-BESKZ = 'E'.
      GW_ORGDATA-MAKE  = 'Make'.
    ELSE.
      GW_ORGDATA-MAKE  = 'Buy'.
    ENDIF.
    IF GW_PLANTDATA-SCHGT = 'X'.
      GW_ORGDATA-STYPE = '4'. " Bulk
    ELSE.
      GW_ORGDATA-STYPE = '1'. " Push
    ENDIF.


    GW_ORGDATA-LOCAT = '9999'.

    CASE P_ORGN.
      WHEN 'U03'.
        GW_ORGDATA-SUBIN  = '0301_FG'.
      WHEN 'U04'.
        GW_ORGDATA-SUBIN  = 'STK1_FG'.
      WHEN 'U43'.
        GW_ORGDATA-SUBIN  = 'FG_INV'.
      WHEN 'U44'.
        GW_ORGDATA-SUBIN  = 'FG_INV'.
      WHEN OTHERS.
    ENDCASE.


*    GW_ORGDATA-BUYER = GW_PLANTDATA-EKGRP. " Map Code 8
    CLEAR GT_MAPS_ORACLE.
    READ TABLE GT_MAPS_ORACLE WITH KEY MAPCODE = '8'
                                       SRCVAL = GW_PLANTDATA-EKGRP.
    IF SY-SUBRC = 0.
      GW_ORGDATA-BUYER = GT_MAPS_ORACLE-TARVAL.
    ENDIF.

    CASE P_ORGN.
      WHEN 'S13'. GW_ORGDATA-PBUNT = 'Cohu SG LTXC'.
      WHEN 'P13'. GW_ORGDATA-PBUNT = 'Cohu PH LTXC'.
      WHEN OTHERS.  GW_ORGDATA-PBUNT = 'Cohu US LTXC'.
    ENDCASE.

    GW_ORGDATA-LAND1 = GW_PLANTDATA-LAND1.
    GW_ORGDATA-TCODE = GW_PLANTDATA-ZHTSU.
    GW_ORGDATA-TDATE = GW_PLANTDATA-AEDAT+0(4) && '-' && GW_PLANTDATA-AEDAT+4(2) && '-' && GW_PLANTDATA-AEDAT+6(2) && 'T00:00:00.000-0000'.
    GW_ORGDATA-TECCN = GW_PLANTDATA-ZECCN.
    GW_ORGDATA-TSCHD = GW_PLANTDATA-ZSCHD.
    APPEND GW_ORGDATA TO GT_ORGDATA.

  ENDLOOP.

**********  Export Data ************
  CREATE OBJECT OBJ_MG_TEMPLATE.
  CALL METHOD OBJ_MG_TEMPLATE->EXPORT_DATA
    EXPORTING
      IN_ISGUI                = P_GUI
      IN_OUTPUT_PATH          = P_OUTPUT
*     IN_OUTPUT_FILENAME      =
      IN_OUTPUT_FILEEXTENSION = G_FILEEXTENSION
      IN_TEMPLATE_FILE        = P_ORG
      INT_DATA                = GT_ORGDATA[].
